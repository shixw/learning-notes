1. svn安装
     centos：
		$ yum install subversion
		$ yum install mod_dav_svn	
2. 创建仓库
	svnadmin create /home/mike/svn-repos
3. 签入文件
	进入到要签入的目录
	svn import -m "Importing Sesame project" file:///home/mike/svn-repos/sesame/trunk
4. 签出项目
	进入目录
	 svn co file:///home/mike/svn-repos/sesame/trunk sesame
	使用 -r 指定版本号或者想要的日期
		svn checkout -r 7 file:///home/mike/svn-repos/sesame/trunk sesame
5. 使用 svn status命令来获得一个或者多个文件的状态,如果执行 --show-updates 选项，则会与服务器通信显示额外的信息
	svn status Day.txt
6. 使用 svn diff命令来显示文件在项目仓库中的版本和本地拷贝之间的区别
	[root@localhost tmpdir]# svn diff Day.txt 
	Index: Day.txt
	===================================================================
	--- Day.txt	(revision 1)
	+++ Day.txt	(working copy)
	@@ -3,3 +3,5 @@
	 wednesday
	 thursday
	 friday
	+saturday
	+sunday
7. 使用 svn commit 提交修改
	[root@localhost sesame]# svn commit -m "Client wants us to work on weekends"
	Sending        tmpdir/Day.txt
	Transmitting file data .
	Committed revision 2.
8. 使用 svn log 查看日志 确认是否确实被提交  不加参数显示为当前目录及其所有子目录
		[root@localhost sesame]# svn log tmpdir/Day.txt 
		------------------------------------------------------------------------
		r2 | root | 2016-02-24 11:09:33 +0800 (Wed, 24 Feb 2016) | 1 line

		Client wants us to work on weekends
		------------------------------------------------------------------------
		r1 | root | 2016-02-23 16:45:35 +0800 (Tue, 23 Feb 2016) | 1 line

		Importing Sesame project
		------------------------------------------------------------------------
	使用 -r 参数 可以显示某个版本或 版本段内的变动 如 -r 19:24 显示版本19到24的改动
9. 使用 svn log --verbose 显示每个版本中具体有哪些被改动了(简写为 -v )
	[root@localhost sesame]# svn log --verbose tmpdir/Day.txt 
	------------------------------------------------------------------------
	r2 | root | 2016-02-24 11:09:33 +0800 (Wed, 24 Feb 2016) | 1 line
	Changed paths:
	   M /sesame/trunk/tmpdir/Day.txt

	Client wants us to work on weekends
	------------------------------------------------------------------------
	r1 | root | 2016-02-23 16:45:35 +0800 (Tue, 23 Feb 2016) | 1 line
	........
10. 使用 svn update 将目录更新到最新版本
11. 使用 svn status --show-updates (简写为-u) 去让Subversion 从项目仓库中找到目录下的那些文件是否有更新
	[root@localhost tmpdir]# svn status --show-updates
		*        2   Number.txt
	Status against revision:      3
     * 表示位于版本的 2 的Number.txt 有一项更新，并且项目仓库当前版本号是 3 
12. 使用 svn diff -rHEAD 比较文件的 本地拷贝与项目仓库中的最新版本之间的差别
		[root@localhost tmpdir]# svn diff -rHEAD Number.txt
		Index: Number.txt
		===================================================================
		--- Number.txt	(revision 3)
		+++ Number.txt	(working copy)
		@@ -3,5 +3,3 @@
		 two
		 three
		 four
		-five
		-six
	比较 19版本和21版本的差距
		svn diff -r19:21 Number.txt


13. 同时修改一个文件冲突测试
	[root@localhost tmpdir]# svn commit -m "Zero needs emphasizing"
	Sending        tmpdir/Number.txt
	svn: Commit failed (details follow):
	svn: File '/sesame/trunk/tmpdir/Number.txt' is out of date
	[root@localhost tmpdir]# svn update
	G    Number.txt
	Updated to revision 4.
     G 告诉我们Subversion 已经把本地的版本和项目仓库的版本合并到了一起(正常更新为 U )
14. 同时修改同一个文件的同一行
	[root@localhost tmpdir]# svn commit -m "One should be Japanese"
	Sending        tmpdir/Number.txt
	svn: Commit failed (details follow):
	svn: File '/sesame/trunk/tmpdir/Number.txt' is out of date
	[root@localhost tmpdir]# svn update
	Conflict discovered in 'Number.txt'.
	Select: (p) postpone, (df) diff-full, (e) edit,
		(mc) mine-conflict, (tc) theirs-conflict,
		(s) show all options: p
	C    Number.txt
	Updated to revision 6.
	Summary of conflicts:
	  Text conflicts: 1
	[root@localhost tmpdir]# cat Number.txt
	Zero
	<<<<<<< .mine
	one2222ZZ
	=======
	one111ZZ
	>>>>>>> .r6
	two
	three
	four
	five
	Six
	[root@localhost tmpdir]# svn commit -m "One should be Japanese"
	svn: Commit failed (details follow):
	svn: Aborting commit: '/root/work/sesame/tmpdir/Number.txt' remains in conflict
	[root@localhost tmpdir]# svn resolved Number.txt
	Resolved conflicted state of 'Number.txt'
	[root@localhost tmpdir]# svn commit -m "One should be Japanese"
	Sending        tmpdir/Number.txt
	Transmitting file data .
	Committed revision 7.
15. 启动svnserve 以提供网络服务
	Windows：	start svnserve --daemon --root c:\svn-repos
	Linux：		svnserve --daemon --root /home/mike/svn-repos/

	查看服务是否启动 ：ps -ef | grep svn
16. 使用 svn:// 网络检出项目
	[root@localhost work]# svn co svn://192.168.139.141/sesame/trunk vizier
	A    vizier/tmpdir
	A    vizier/tmpdir/Number.txt	
17. 开启svn用户验证及基于路径的安全性
	在文件 svn-repos/conf/svnserve.conf 中添加
		[general]
		anon-access = read
		auth-access = write
		password-db = passwd

		#开启基于路径的安全性
		authz-db = authz
	创建密码文件  passwd  内容如下
		[users]
		xianwei=xianwei
		harry = harryssecret
		sally = sallyssecret
18. svn仓库备份
	[root@localhost conf]# svnadmin dump /home/mike/svn-repos/ > dumpfile.20160224
	* Dumped revision 0.
	* Dumped revision 1.
	* Dumped revision 2.
	* Dumped revision 3.
	* Dumped revision 4.
	* Dumped revision 5.
	* Dumped revision 6.
	* Dumped revision 7.
	* Dumped revision 8.
	* Dumped revision 9.
19. 还原svn仓库
	svnadmin load svn-repos2 < dumpfile.20160224
20. 增量备份：svnadmin dump 接受一个 --incremental 选项，以及一个 --revision 选择一个版本范围产生尺寸小一下的备份文件
	svnadmin dump --incremental --revision 100:104 /home/svn-repos
21. 使用 svn add 增加一个文件
	[root@localhost tmpdir]# touch Month.txt
	[root@localhost tmpdir]# svn add Month.txt
	A         Month.txt
22. 使用svn info 查看工作的拷贝的来源
	[root@localhost work]# svn info sesame
	Path: sesame
	URL: file:///home/mike/svn-repos/sesame/trunk
	Repository Root: file:///home/mike/svn-repos
	Repository UUID: 49ba1e7b-b7f2-46b7-940d-5f8b2dd21e79
	Revision: 2
	Node Kind: directory
	Schedule: normal
	Last Changed Author: root
	Last Changed Rev: 2
	Last Changed Date: 2016-02-24 11:09:33 +0800 (Wed, 24 Feb 2016)
23. 使用 svn propset 设置一个文件的属性
	[root@localhost tmpdir]# svn propset checked-by "Mike Mason" Number.txt 
	property 'checked-by' set on 'Number.txt'
	[root@localhost tmpdir]# svn status
	 M      Number.txt
24. 使用 svn propedit 编辑一个文件属性
	[root@localhost tmpdir]# svn propedit checked-by Number.txt 
25. svn proplist 和 svn propget 可以列出当前文件的所有属性并打印出当前属性的当前值
	[root@localhost tmpdir]# svn proplist Number.txt 
	Properties on 'Number.txt':
	  checked-by
	[root@localhost tmpdir]# svn propget checked-by Number.txt 
	Mike Mason
26. 使用 svn propdel 彻底删除一个属性，属性并没有永远消失，可以追溯到以前的版本

27. 使用 svn propedit svn:ignore timelib 打开编辑器编辑timelib的svn:ignore属性，输入
		*.class
		*.bak
	再次运行svn status ，.class .bak 文件就会被忽略掉 
28. 使用 svn copy 复制一个文件
	[root@localhost tmpdir]# svn copy Number.txt Data.txt
	A         Data.txt
	[root@localhost tmpdir]# svn commit -m "create example data file"
	Adding         tmpdir/Data.txt
	Sending        tmpdir/Number.txt

	Committed revision 11.
29. 使用 svn move 重命名文件或文件夹，实际为添加和删除操作
	[root@localhost tmpdir]# svn move Data.txt d.txt
	A         d.txt
	D         Data.txt
	[root@localhost sesame]# svn move tmpdir tmp
	A         tmp
	D         tmpdir/d.txt
	D         tmpdir/Month.txt
	D         tmpdir/Number.txt
	D         tmpdir/Data.txt
	D         tmpdir/Day.txt
	D         tmpdir
30. 直接使用 URL 重名 
	svn move -m "Rename util to common" svn://olio/sesame/trunk/util svn://olio/sesame/trunk/common
31. 使用  svn diff > 文件 将改动形成一个补丁文件
	[root@localhost tmp]# svn diff > mychanges.patch
32. 使用 patch -p0 -i mychanges.patch 将补丁应用到源代码中
33. 发生冲突时可以使用 svn revert Number.txt 删掉你的改动并使用项目仓库中的文件版本
34. svn blame 命令显示一个或者多个文件的内容。对于每个文件中的每一行，它会显示改动了那行的最后一个版本，以及做出的这个改动的人
	[root@localhost tmp]# svn blame Number.txt 
	     9       root ZEEZZ
	     7       root 122212
	     1       root two
	     1       root three
	     1       root four
	     3       root five
	     4       root Six
35. 使用 svn merge 撤销改动
	svn merge -r 27:26 Number.txt
36. 设置文件 svn:needs-lock 属性 为 true (实际可以为任意值)，为文件加锁,修改后提交到项目仓库才会生效
	svn propset svn:needs-lock true Cuu.xls
	svn commit -m "Enabled locking for spreadsheet"
37. 编辑文件之前，使用 svn lock 把文件锁住，使用 -m 添加锁定的一些注释
	svn lock Cuu.xls -m "Adding some "
38. 使用 svn info 查看文件加锁的信息,非加锁人可以使用 URL 完整路径 查看问价的加锁信息
	svn info cuu.xls
39. 当修改完提交后会自动解开任何拥有的锁，锁拥有这个也可以使用 svn unlock 去打开它，
	可以传入 --force 选项来解开别人对文件的加锁
		svn unlock svn://xxx/xx/sad.xls 
		svn unlock --force svn://xxx/xx/sad.xls 
	可以使用钩子脚本限制谁能加锁和解锁文件
40. 使用 svn lock --force 会直接将别人的所偷来，使自己拥有当前的锁 
41. 创建分支
	创建分支存储目录  branches
		[root@localhost work]# svn mkdir -m "Create branches directory" svn://localhost/sesame1/branches
		Committed revision 13.
	复制文件到分支目录
		[root@localhost work]# svn copy -m "Creating release branch for 1.0" svn://localhost/sesame1/trunk svn://localhost/sesame1/branches/RB-1.0

		Committed revision 14.
42. 在分支上开发，两种方式，1. 签出分支  2. 使用 svn switch 将现有工作拷贝转向为指向分支
	签出分支(在签出的目录中修改提交将会添加到分支中，而不是主干中)
		[root@localhost work]# svn co svn://localhost/sesame1/branches/RB-1.0 rb1.0
		A    rb1.0/Number.txt
		A    rb1.0/Day.txt
		Checked out revision 14.
	使用 svn switch 命令，可以接受 --revision 参数，来指定你想要转换那个版本的分支，默认为最新版
		[root@localhost s1]# svn switch svn://localhost/sesame1/branches/RB-1.0
		At revision 14.
	将工作拷贝转换回主干
		[root@localhost s1]# svn switch svn://localhost/sesame1/trunk
		At revision 14.
43. 创建发布标签
	[root@localhost s1]# svn mkdir -m "Create branches directory" svn://localhost/sesame1/tags

	Committed revision 15.
	[root@localhost s1]# svn copy -m "Tag release 1.0.0" svn://localhost/sesame1/branches/RB-1.0 svn://localhost/sesame1/tags/REL-1.0.0

	Committed revision 16.
44. 混合版本标签步骤
	1. 签出版本
	2. 使用 svn switch 改变 某个目录的指向，
	3. 测试后 ，使用svn copy 将工作目录拷贝到新的标签目录中
45. 简单Bug处理，及合并到主分支
	[root@localhost work]# cd rb1.0/
	[root@localhost rb1.0]# ls
	Day.txt  Number.txt
	[root@localhost rb1.0]# vi Day.txt 
	[root@localhost rb1.0]# svn status
	M       Day.txt
	[root@localhost rb1.0]# svn commit -m "Fix bug" 
	Sending        Day.txt
	Transmitting file data .
	Committed revision 17.
	[root@localhost rb1.0]# cd ../s1/
	[root@localhost s1]# svn update
	At revision 17.
	[root@localhost s1]# cat Day.txt 
	monday
	tuesday
	wednesday
	thursday
	friday
	[root@localhost s1]# svn merge -r16:17 svn://localhost/sesame1/branches/RB-1.0
	--- Merging r17 into '.':
	U    Day.txt
	[root@localhost s1]# cat Day.txt 
	monday
	asdsads
	tuesday
	wednesday
	thursday
	friday
	sad
	asd
	asd
	sadsa

	[root@localhost s1]# svn commit -m "Merge r17"
	Sending        .
	Sending        Day.txt
	Transmitting file data .
	Committed revision 18.
46. 复杂Bug处理流程
	1. 把包含bug的代码分支到新的bug修正分支中
	2. 给新分支打个标签，标记bug修正开始 PRE-10512
	3. 编写测试重现bug，修改代码以让新的测试通过，验证构建过程还能通过
	4. 提交你的改动到项目仓库，如果需要舱室好几次才能修正bug，也可以
	5. 代码修正完成后，再给分支打一个标签，标记bug修正结束 POST-10512
	6. 使用两个标签来把修正代码合并到所有其他受影响的分支
		svn merge svn://xxx/sesame/tags/PRE-10512 svn://xxx/sesame/tags/POST-10512 
47. 实验分支







